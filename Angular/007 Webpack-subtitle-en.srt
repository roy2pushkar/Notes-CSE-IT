1
00:00:00,000 --> 00:00:04,000
Alright, now let's make a timing change to this

2
00:00:04,000 --> 00:00:08,000
application. So in the app folder, open up app

3
00:00:08,000 --> 00:00:12,000
.component.ts. Now

4
00:00:12,000 --> 00:00:16,000
if you have never worked with TypeScript before, don't worry about this code, as we go through

5
00:00:16,000 --> 00:00:20,000
the course, I'm going to break this up for you so you will know exactly what is happening

6
00:00:20,000 --> 00:00:24,000
here. So, all I want you to do here, is to change this

7
00:00:24,000 --> 00:00:28,000
string, from app, to Angular app.

8
00:00:28,000 --> 00:00:32,000
Now, save the file. Back in the terminal,

9
00:00:32,000 --> 00:00:36,000
look at this message, webpack: Compliing...So Angular

10
00:00:36,000 --> 00:00:40,000
SCLI uses a tool called Webpack, which is a billed automation

11
00:00:40,000 --> 00:00:44,000
tool. It gets all of our scripts and style sheets

12
00:00:44,000 --> 00:00:48,000
combines them, puts them in a bundle, and then minifies that bundle,

13
00:00:48,000 --> 00:00:52,000
and this is for optimization. So here you can see we have a few bundles,

14
00:00:52,000 --> 00:00:56,000
like poyfills, which includes all of the scripts to fill the gap,

15
00:00:56,000 --> 00:01:00,000
between the version of the Javascript that Angular needs, and the version of Javascript

16
00:01:00,000 --> 00:01:04,000
supported by most browsers out there. You have main.bundle which

17
00:01:04,000 --> 00:01:08,000
is all the source code of our application, you have styles.bundle

18
00:01:08,000 --> 00:01:12,000
which includes all of our style sheets. And note that here style sheets are actually

19
00:01:12,000 --> 00:01:16,000
stored in the Javascript bundle. You're going to see that in a second.

20
00:01:16,000 --> 00:01:20,000
We also have this vendor.bundle, which includes all the third party

21
00:01:20,000 --> 00:01:24,000
libraries. Now, at the time of recording this video unfortunately Angular

22
00:01:24,000 --> 00:01:28,000
CLI does not allow you to customize the name of

23
00:01:28,000 --> 00:01:32,000
these bundles, or add additional bundles. But there is a discussion going

24
00:01:32,000 --> 00:01:36,000
on in Github, and chances are this may change in the future. Now

25
00:01:36,000 --> 00:01:40,000
that aside, what I want you to note here, is that whenever you change one of your

26
00:01:40,000 --> 00:01:44,000
files, where that file being a style sheet, a typescript file, or

27
00:01:44,000 --> 00:01:48,000
HTML file, web pack automatically recompiles your

28
00:01:48,000 --> 00:01:52,000
application and refreshes your bundles. So now here at

29
00:01:52,000 --> 00:01:56,000
the bottom, you can see webpack: Complied successfully.

30
00:01:56,000 --> 00:02:00,000
Now, if you go back to the browser. Look without me even refreshing

31
00:02:00,000 --> 00:02:04,000
this page, now we have the new title: Welcome to Angular app!!

32
00:02:04,000 --> 00:02:08,000
So this is a feature of web pack called Hot Module Replacement

33
00:02:08,000 --> 00:02:12,000
or Hot Module Reloading, so whenever one of the source files is

34
00:02:12,000 --> 00:02:16,000
modified, Webpack automatically refreshes your browser.

35
00:02:16,000 --> 00:02:20,000
Now, let's try to click on this page, and go to View Page Source.

36
00:02:20,000 --> 00:02:24,000
At the bottom of this page, look at

37
00:02:24,000 --> 00:02:28,000
this script tax. So all the bundles that Webpack generated,

38
00:02:28,000 --> 00:02:32,000
it also injected them into our index

39
00:02:32,000 --> 00:02:36,000
.html. So just to refresh your memory,

40
00:02:36,000 --> 00:02:40,000
here in index.html, look we don't have any references to style

41
00:02:40,000 --> 00:02:44,000
sheet, or script file. So this is something that happens at run time.

42
00:02:44,000 --> 00:02:48,000
So Webpack automatically injects these

43
00:02:48,000 --> 00:02:52,000
scripts into our index.html. Now let's take a look at

44
00:02:52,000 --> 00:02:56,000
this styles.bundle.js. So this

45
00:02:56,000 --> 00:03:00,000
typically what we have here is some javascript, and in the middle of this javascript

46
00:03:00,000 --> 00:03:04,000
code we can find the styles used in your application.

47
00:03:04,000 --> 00:03:08,000
Now how this works is a little bit complicated, so don't worry about it for now,

48
00:03:08,000 --> 00:03:12,000
what I want you to know, is that all of your style sheets are compiled

49
00:03:12,000 --> 00:03:15,000
into a Javascript bundle.

