1
00:00:02,190 --> 00:00:02,430
All right.

2
00:00:02,440 --> 00:00:06,320
Now let me show you a quick way to create a service in Angola.

3
00:00:06,550 --> 00:00:07,970
So we go to the terminal.

4
00:00:08,080 --> 00:00:15,430
Once again you can switch to the terminal window or you can press control and back take in fiascoes.

5
00:00:15,440 --> 00:00:17,620
So here we have a small terminal window.

6
00:00:17,870 --> 00:00:24,570
We're going to use Engler Seelye generate a service so n g g or generate.

7
00:00:24,710 --> 00:00:27,260
Previously we use C for components.

8
00:00:27,260 --> 00:00:33,540
Now we're going to use as our services imagine we're going to create a service for sending emails.

9
00:00:33,560 --> 00:00:36,930
This service is going to call an end point somewhere.

10
00:00:36,980 --> 00:00:38,560
We're sending these e-mails.

11
00:00:38,720 --> 00:00:40,710
So let's call this e-mail.

12
00:00:40,850 --> 00:00:42,940
I know that here I just add the service name.

13
00:00:43,250 --> 00:00:45,520
I don't need to add dot service.

14
00:00:45,800 --> 00:00:46,480
OK.

15
00:00:46,820 --> 00:00:50,730
So this generates two fires for us.

16
00:00:50,730 --> 00:00:56,850
One is the actual service file and the other is a spec file which includes some boilerplate code for

17
00:00:56,850 --> 00:00:59,900
writing unit tests for that service.

18
00:00:59,920 --> 00:01:06,530
So in the app folder look here's our news service e-mail that serviced a TS.

19
00:01:06,770 --> 00:01:12,170
So we have a plane typescript class called email service but there is something extra here that you

20
00:01:12,170 --> 00:01:13,820
didn't see before.

21
00:01:13,820 --> 00:01:20,150
We have this injectable which is another decorator function similar to the component decorator function.

22
00:01:20,150 --> 00:01:21,450
Why do we need this here.

23
00:01:21,500 --> 00:01:27,280
You would need this decorator only if this service had dependencies in its constructor.

24
00:01:27,410 --> 00:01:35,640
For example imagine here we had a dependency lock log service of type log service.

25
00:01:35,690 --> 00:01:41,040
In this case we need to apply these injectable decorator function on this class.

26
00:01:41,150 --> 00:01:46,730
And this tells angular that this class is an injectable class which means angular should be able to

27
00:01:46,820 --> 00:01:51,080
inject dependencies of this class into its constructor.

28
00:01:51,080 --> 00:01:56,960
Now we didn't use this decorator when defining components because when we use the component decorator

29
00:01:57,300 --> 00:02:02,120
that decorator internally includes these injectable decorator.

30
00:02:02,360 --> 00:02:04,220
So that's all about injectable.

31
00:02:04,220 --> 00:02:09,800
And by the way note that this decorator function is defined in angular slushed core library.

